%{
#include <cstdio>
#include <iostream>
#include <set>
using namespace std;

#include "expr.hpp"

// stuff from flex that bison needs to know about:
extern "C" int yylex();
int maxVar=0;

void yyerror(const char *s);

Expr *res=NULL;
%}

// Bison fundamentally works by asking flex to get the next token, which it
// returns as an object of type "yystype".  But tokens could be of any
// arbitrary data type!  So we deal with that in Bison by defining a C union
// holding each of the types of tokens that Flex could return, and have Bison
// use that union instead of "int" for the definition of "yystype":
%union {
    int ival;
    class Expr *exp;
}

%start input

// define the "terminal symbol" token types I'm going to use (in CAPS
// by convention), and associate each with a field of the union:
%token TK_OU TK_ET TK_BN TK_XOR TK_IMP TK_EQIV
%token TK_LPAREN TK_RPAREN
%token TK_TIL TK_MNS
%token TK_END
%token TK_COM
%token <ival> TK_VAR TK_BOOL
%token TK_EGAL TK_DIF
%type <exp> expression
%type <exp> ligne

%left TK_OU
%left TK_ET
%left TK_BN
%left TK_XOR
%left TK_IMP
%left TK_EQIV

%%
// this is the actual grammar that bison will parse, but for right now it's just
// something silly to echo to the screen what bison gets from flex.  We'll
// make a real one shortly:

input: expression TK_END TK_BN{ res = $1; }
	|  expression TK_END {res = $1;}

ligne:
	| ligne TK_VAR TK_EGAL TK_VAR ligne			{ maxVar=max(maxVar, $2); maxVar=max(maxVar, $4); $$ = new EVar($2, $4, true);}
	| ligne TK_VAR TK_DIF TK_VAR ligne			{ maxVar=max(maxVar, $2); maxVar=max(maxVar, $4); $$ = new EVar($2, $4, false);}
	| TK_MNS TK_VAR								{ if ($2>maxVar) maxVar=$2; $$ = new ENot(*new EVar($2));					}
	| TK_VAR									{ if ($1>maxVar) maxVar=$1; $$ = new EVar($1);	}
    | TK_BOOL									{ $$ = new EConst($1);							}
    | TK_LPAREN ligne TK_RPAREN					{ $$ = $2;										}
    | ligne TK_OU ligne							{ $$ = new EOu(*$1, *$3);						}
    | ligne TK_ET ligne							{ $$ = new EEt(*$1, *$3);						}
    | ligne TK_XOR ligne						{ $$ = new EXor(*$1, *$3);						}
    | ligne TK_IMP ligne						{ $$ = new EImp(*$1, *$3);						}
    | ligne TK_EQIV ligne						{ $$ = new EEqiv(*$1, *$3);						}
    | TK_TIL ligne								{ $$ = new ENot(*$2);							}
	| TK_COM ligne								{ $$ = $2;										}
	| ligne TK_COM								{ $$ = $1;										}


expression: 
	  ligne							{ $$ = $1; }
	| expression TK_BN ligne		{ $$ = new EEt(*$1,*$3); }
		
%%
